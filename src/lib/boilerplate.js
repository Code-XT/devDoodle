const boilerplate = {
  matl: "% MATL example code",
  bash: "#!/bin/bash\necho 'Hello, World!'",
  befunge93: ">987v>.v\nv456<  :\n>321 ^ _@",
  bqn: "'Hello, World!'",
  brachylog: "writeln('Hello, World!')",
  brainfuck:
    "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.",
  cjam: '"Hello, World!"',
  clojure: '(println "Hello, World!")',
  cobol:
    "IDENTIFICATION DIVISION.\nPROGRAM-ID. HelloWorld.\nPROCEDURE DIVISION.\nDISPLAY 'Hello, World!'.\nSTOP RUN.",
  coffeescript: "console.log 'Hello, World!'",
  cow: "MoOooOooOooOOOooOoOOOoOOooOoOOoOOOoOoOOooOoOoooOOOoOOoOoOOOoOooOoOooOOOooOOOooOoOoooOOo",
  crystal: 'puts "Hello, World!"',
  dart: "void main() {\n  print('Hello, World!');\n}",
  dash: "#!/bin/dash\necho 'Hello, World!'",
  typescript: "console.log('Hello, World!');",
  javascript: "console.log('Hello, World!');",
  "basic.net":
    'Module HelloWorld\n    Sub Main()\n        Console.WriteLine("Hello, World!")\n    End Sub\nEnd Module',
  "fsharp.net": 'printfn "Hello, World!"',
  "csharp.net":
    'using System;\nclass Program {\n    static void Main() {\n        Console.WriteLine("Hello, World!");\n    }\n}',
  fsi: 'printfn "Hello, World!"',
  dragon: 'print("Hello, World!")',
  elixir: 'IO.puts "Hello, World!"',
  emacs: '(message "Hello, World!")',
  emojicode: '🏁 🍇\n  😀 "Hello, World!"\n🍉',
  erlang:
    '-module(hello).\n-export([hello_world/0]).\nhello_world() -> io:format("Hello, World!~n").',
  file: "echo Hello, World!",
  forte: 'print("Hello, World!")',
  forth: ': hello-world  ." Hello, World!" ;',
  freebasic: 'PRINT "Hello, World!"',
  awk: 'BEGIN { print "Hello, World!" }',
  c: '#include <stdio.h>\nint main() {\n    printf("Hello, World!\\n");\n    return 0;\n}',
  "c++":
    '#include <iostream>\nint main() {\n    std::cout << "Hello, World!" << std::endl;\n    return 0;\n}',
  d: 'import std.stdio;\nvoid main() {\n    writeln("Hello, World!");\n}',
  fortran: 'program hello\n  print *, "Hello, World!"\nend program hello',
  go: 'package main\nimport "fmt"\nfunc main() {\n    fmt.Println("Hello, World!")\n}',
  golfscript: '"Hello, World!"',
  groovy: "println 'Hello, World!'",
  haskell: 'main = putStrLn "Hello, World!"',
  husk: 'hello := IO.puts "Hello, World!"',
  iverilog:
    'module main;\ninitial begin\n    $display("Hello, World!");\n    $finish;\nend\nendmodule',
  japt: "'Hello, World!'",
  java: 'public class Main {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}',
  jelly: "“Hello, World!”",
  julia: 'println("Hello, World!")',
  kotlin: 'fun main() {\n    println("Hello, World!")\n}',
  lisp: '(format t "Hello, World!")',
  llvm_ir:
    '@.str = private constant [14 x i8] c"Hello, World!\\00"\n\ndefine i32 @main() {\nentry:\n  %0 = call i32 @puts(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0))\n  ret i32 0\n}\ndeclare i32 @puts(i8*)',
  lolcode: 'HAI 1.2\nVISIBLE "Hello, World!"\nKTHXBYE',
  lua: 'print("Hello, World!")',
  csharp:
    'using System;\nclass Program {\n    static void Main() {\n        Console.WriteLine("Hello, World!");\n    }\n}',
  basic: 'PRINT "Hello, World!"',
  nasm: "section .data\n    hello db 'Hello, World!', 0\nsection .text\n    global _start\n_start:\n    mov edx, 13\n    mov ecx, hello\n    mov ebx, 1\n    mov eax, 4\n    int 0x80\n    mov eax, 1\n    int 0x80",
  nasm64:
    "section .data\n    hello db 'Hello, World!', 0\nsection .text\n    global _start\n_start:\n    mov rdx, 13\n    mov rcx, hello\n    mov rbx, 1\n    mov rax, 4\n    int 0x80\n    mov rax, 1\n    int 0x80",
  nim: 'echo "Hello, World!"',
  ocaml: 'print_endline "Hello, World!"',
  octave: "disp('Hello, World!')",
  osabie: "println('Hello, World!')",
  paradoc: "'Hello, World!'",
  pascal: "program HelloWorld;\nbegin\n  writeln('Hello, World!');\nend.",
  perl: 'print "Hello, World!\\n";',
  php: "<?php\necho 'Hello, World!';\n?>",
  ponylang:
    'actor Main\n  new create(env: Env) =>\n    env.out.print("Hello, World!")',
  prolog: ":- initialization(main).\nmain :- write('Hello, World!'), nl.",
  pure: 'println "Hello, World!"',
  powershell: "Write-Output 'Hello, World!'",
  pyth: "H",
  python2: 'print "Hello, World!"',
  python: 'print("Hello, World!")',
  racket: '#lang racket\n(displayln "Hello, World!")',
  raku: "say 'Hello, World!';",
  retina: '"Hello, World!"',
  rockstar:
    'Listen to your heart\nShout "Hello, World!"\nPut your heart into it',
  rscript: "cat('Hello, World!\\n')",
  ruby: "puts 'Hello, World!'",
  rust: 'fn main() {\n    println!("Hello, World!");\n}',
  samarium: 'println("Hello, World!")',
  scala: 'object HelloWorld extends App {\n  println("Hello, World!")\n}',
  smalltalk: "'Hello, World!' printNl",
  sqlite3: "SELECT 'Hello, World!';",
  swift: 'print("Hello, World!")',
  typescript: "console.log('Hello, World!');",
  vlang: "fn main() {\n    println('Hello, World!')\n}",
  vyxal: "'Hello, World!'",
  yeethon: 'print("Hello, World!")',
  zig: 'const std = @import("std");\npub fn main() void {\n    std.debug.print("Hello, World!\\n", .{});\n}',
};

export default boilerplate;
